let fork=require("child_process").fork;const fs=require("fs"),path=require("path"),ini=require("ini"),readline=require("readline");let isShuttingDown=!1;const childProcesses=new Map,crashRecovery=new Map;let startTime=Date.now();const colors={reset:"[0m",bright:"[1m",dim:"[2m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m"},rl=readline.createInterface({input:process.stdin,output:process.stdout});class Logger{static log(e,o="INFO"){var r=(new Date).toLocaleTimeString();console.log(`[${r}] [${o}] `+e)}static error(e){var o=(new Date).toLocaleTimeString();console.error(colors.red+`[${o}] [ERROR] `+e+colors.reset)}static success(e){var o=(new Date).toLocaleTimeString();console.log(colors.green+`[${o}] [SUCCESS] `+e+colors.reset)}static warning(e){var o=(new Date).toLocaleTimeString();console.log(colors.yellow+`[${o}] [WARNING] `+e+colors.reset)}static info(e){var o=(new Date).toLocaleTimeString();console.log(colors.cyan+`[${o}] [INFO] `+e+colors.reset)}static serviceLog(e,o,r="INFO"){var s=(new Date).toLocaleTimeString(),r={INFO:colors.cyan,SUCCESS:colors.green,WARNING:colors.yellow,ERROR:colors.red}[r]||colors.white;console.log(r+`[${s}] [${e}] `+o+colors.reset)}}class AppUtils{static printLogo(){return new Promise((r,s)=>{var e=path.join(__dirname,"StartMap/Logo/StartLogo.txt");fs.readFile(e,"utf8",(e,o)=>{if(e)Logger.error("无法读取Logo文件: "+e.message),s(e);else{e=o.split("\n").map(e=>"[34m"+e+"[0m").join("\n");console.log(e),r()}})})}static readConfig(){var e=path.join(__dirname,"Conf/Start.ini");try{var o=ini.parse(fs.readFileSync(e,"utf-8"));if(Object.keys(o).some(e=>"all"===e.toLowerCase()))throw new Error('不允许有程序名称为 "ALL" 或 "all"');var r,s,t=[];for([r,s]of Object.entries(o)){var c=parseInt(s["priority level"])||0,l="true"===(s.Keep||s.keep||"false").toLowerCase(),i="true"===(s.ForceKeep||s.forceKeep||"false").toLowerCase();t.push({name:r,config:s,priority:c,keepAlive:l,forceKeepAlive:i})}return t.sort((e,o)=>o.priority-e.priority),t}catch(e){throw Logger.error("无法读取配置文件: "+e.message),e}}static countdown(r){return new Promise(e=>{Logger.log(`系统将在 ${r} 秒后启动...`,"WARNING");const o=setInterval(()=>{0<--r?Logger.log(`倒计时: ${r} 秒`,"WARNING"):(clearInterval(o),Logger.success("开始启动服务..."),e())},1e3)})}static formatUptime(e){var e=Math.floor(e/1e3),o=Math.floor(e/60),r=Math.floor(o/60),s=Math.floor(r/24);return 0<s?s+`天 ${r%24}小时 ${o%60}分钟 ${e%60}秒`:0<r?r+`小时 ${o%60}分钟 ${e%60}秒`:0<o?o+`分钟 ${e%60}秒`:e+"秒"}}class CommandHandler{constructor(e){this.serviceManager=e,this.setupCommands()}setupCommands(){console.log(colors.green+"\n==========================================="),console.log("    服务管理器控制台 - 可用命令:"),console.log("    help - 显示帮助信息"),console.log("    list - 显示所有服务状态"),console.log("    status - 显示系统状态"),console.log("    start <服务名> - 启动指定服务"),console.log("    stop <服务名|all> - 停止服务"),console.log("    restart <服务名|all> - 重启服务"),console.log("    logs <服务名> - 显示服务日志"),console.log("    crash - 显示崩溃统计"),console.log("    exit - 退出系统"),console.log("==========================================="+colors.reset),rl.prompt(),rl.on("line",e=>{this.processCommand(e.trim()),rl.prompt()}),rl.on("close",()=>{Logger.info("控制台会话结束"),this.serviceManager.shutdown("CONSOLE_EXIT")})}processCommand(e){var e=e.split(" "),o=e[0].toLowerCase(),r=e.slice(1);try{switch(o){case"help":case"h":this.showHelp();break;case"list":case"ls":this.listServices();break;case"status":case"stat":this.showStatus();break;case"start":0===r.length?Logger.error("请指定要启动的服务名称"):this.startService(r[0]);break;case"stop":0===r.length?Logger.error("请指定要停止的服务名称或 'all'"):this.stopService(r[0]);break;case"restart":0===r.length?Logger.error("请指定要重启的服务名称或 'all'"):this.restartService(r[0]);break;case"logs":0===r.length?Logger.error("请指定要查看日志的服务名称"):this.showLogs(r[0]);break;case"crash":this.showCrashStats();break;case"exit":case"quit":case"q":Logger.info("正在退出系统..."),this.serviceManager.shutdown("USER_EXIT");break;case"clear":case"cls":console.clear();break;case"":break;default:Logger.error(`未知命令: ${o}. 输入 'help' 查看可用命令`)}}catch(e){Logger.error("命令执行失败: "+e.message)}}showHelp(){console.log(colors.cyan+"\n📋 可用命令列表:"),console.log("  help, h          - 显示此帮助信息"),console.log("  list, ls         - 显示所有服务状态"),console.log("  status, stat     - 显示系统状态信息"),console.log("  start <服务名>    - 启动指定服务"),console.log("  stop <服务名|all> - 停止指定服务或所有服务"),console.log("  restart <服务名|all> - 重启指定服务或所有服务"),console.log("  logs <服务名>     - 显示指定服务的日志信息"),console.log("  crash            - 显示崩溃统计信息"),console.log("  clear, cls       - 清屏"),console.log("  exit, quit, q    - 退出系统"+colors.reset)}listServices(){0===childProcesses.size?Logger.info("当前没有运行的服务"):(console.log(colors.green+"\n📋 服务列表:"),console.log("="+"=".repeat(80)),childProcesses.forEach((e,o)=>{var r=crashRecovery.get(o)||{crashes:0,recoveryAttempts:0},s=e.forceKeepAlive?"强力守护":e.keepAlive?"标准守护":"无守护",t=e.process.killed?"已停止":"运行中",c=e.process.killed?colors.red:colors.green;console.log(colors.cyan+"🔧 服务名: "+colors.white+o),console.log("   状态: "+c+t+colors.reset),console.log("   PID: "+(e.process.pid||"N/A")),console.log("   优先级: "+(e.priority||0)),console.log("   守护模式: "+s),console.log("   崩溃次数: "+r.crashes),console.log("   恢复尝试: "+r.recoveryAttempts),console.log("-"+"-".repeat(40))}),console.log(colors.reset))}showStatus(){var e=Date.now()-startTime,o=Math.round(process.memoryUsage().rss/1024/1024);console.log(colors.green+"\n📊 系统状态:"),console.log("="+"=".repeat(50)),console.log("  🕐 启动时间: "+new Date(startTime).toLocaleString()),console.log("  ⏱️  运行时长: "+AppUtils.formatUptime(e)),console.log("  📋 总服务数: "+this.serviceManager.services.length),console.log("  ✅ 运行服务: "+childProcesses.size),console.log(`  💾 内存使用: ${o}MB`),console.log("  🔧 Node版本: "+process.version),console.log("="+"=".repeat(50)+colors.reset)}startService(o){if(childProcesses.has(o))Logger.warning(`服务 "${o}" 已在运行中`);else{var e=this.serviceManager.services.find(e=>e.name===o);if(e)try{this.serviceManager.startService(e),Logger.success(`服务 "${o}" 启动请求已发送`)}catch(e){Logger.error(`启动服务 "${o}" 失败: `+e.message)}else Logger.error(`服务 "${o}" 未在配置中找到`)}}stopService(e){if("all"===e.toLowerCase())Logger.warning("正在停止所有服务..."),this.serviceManager.shutdown("USER_STOP_ALL");else{const o=childProcesses.get(e);o?(Logger.info("正在停止服务: "+e),o.process.kill("SIGINT"),setTimeout(()=>{childProcesses.has(e)&&(Logger.warning(`服务 ${e} 未响应，强制终止`),o.process.kill("SIGKILL"))},5e3)):Logger.error(`服务 "${e}" 不存在或未运行`)}}restartService(e){"all"===e.toLowerCase()?(Logger.warning("正在重启所有服务..."),this.serviceManager.restartAllServices()):this.serviceManager.restartSingleService(e)}showLogs(e){var o,r=childProcesses.get(e);r?(o=crashRecovery.get(e)||{crashes:0,recoveryAttempts:0,lastCrashTime:null},console.log(colors.cyan+`
📜 服务 "${e}" 日志信息:`),console.log("="+"=".repeat(50)),console.log("  PID: "+r.process.pid),console.log("  脚本路径: "+r.scriptPath),console.log("  守护模式: "+(r.forceKeepAlive?"强力守护":r.keepAlive?"标准守护":"无守护")),console.log("  崩溃次数: "+o.crashes),console.log("  恢复尝试: "+o.recoveryAttempts),o.lastCrashTime&&console.log("  最后崩溃: "+new Date(o.lastCrashTime).toLocaleString()),console.log("="+"=".repeat(50)+colors.reset)):Logger.error(`服务 "${e}" 不存在或未运行`)}showCrashStats(){console.log(colors.yellow+"\n💥 崩溃统计信息:"),console.log("="+"=".repeat(60));let r=0,s=0,t=!1;crashRecovery.forEach((e,o)=>{(0<e.crashes||0<e.recoveryAttempts)&&(t=!0,r+=e.crashes,s+=e.recoveryAttempts,console.log(`📋 ${o}:`),console.log("   崩溃次数: "+e.crashes),console.log("   恢复尝试: "+e.recoveryAttempts),e.lastCrashTime&&console.log("   最后崩溃: "+new Date(e.lastCrashTime).toLocaleString()),console.log("-"+"-".repeat(30)))}),t?console.log(`📊 总计: ${r} 次崩溃, ${s} 次恢复尝试`):console.log("  暂无崩溃记录"),console.log("="+"=".repeat(60)+colors.reset)}}class ServiceManager{constructor(e){this.services=e}startAllServices(){Logger.info("按优先级顺序启动服务:"),this.services.forEach(o=>{try{var e=o.forceKeepAlive?"强力守护":o.keepAlive?"标准守护":"无守护";Logger.serviceLog(o.name,`准备启动 (优先级: ${o.priority}, 守护模式: ${e})`),this.startService(o)}catch(e){Logger.serviceLog(o.name,"启动失败: "+e.message,"ERROR")}})}startService(e){var o=e.config;if(!o.script)throw new Error("缺少script配置");var r=path.join(__dirname,o.script);if(!fs.existsSync(r))throw new Error("脚本文件不存在: "+r);var o={...process.env,SERVICE_NAME:e.name,SERVICE_PRIORITY:e.priority,SERVICE_KEEP_ALIVE:e.keepAlive,SERVICE_FORCE_KEEP_ALIVE:e.forceKeepAlive,...o},s=fork(r,{env:o}),r=(crashRecovery.set(e.name,{crashes:0,lastCrashTime:null,recoveryAttempts:0}),childProcesses.set(e.name,{process:s,keepAlive:e.keepAlive,forceKeepAlive:e.forceKeepAlive,scriptPath:r,env:o,service:e,priority:e.priority}),e.forceKeepAlive?"强力守护":e.keepAlive?"标准守护":"无守护");Logger.serviceLog(e.name,`已启动 (PID: ${s.pid}, 优先级: ${e.priority}, 守护: ${r})`,"SUCCESS"),this.setupChildProcessListeners(s,e)}setupChildProcessListeners(e,c){const l=c.name;e.on("message",e=>{Logger.serviceLog(l,"消息: "+JSON.stringify(e))}),e.on("exit",(e,o)=>{const r=childProcesses.get(l),s=(childProcesses.delete(l),crashRecovery.get(l));if(s.crashes++,s.lastCrashTime=Date.now(),Logger.serviceLog(l,`已退出 (退出码: ${e}, 信号: ${o}, 崩溃次数: ${s.crashes})`,"WARNING"),(r.keepAlive||r.forceKeepAlive)&&!isShuttingDown){const t=r.forceKeepAlive?"强力恢复":"标准恢复";Logger.serviceLog(l,`作为${t}进程，正在尝试重启...`);e=r.forceKeepAlive?100:5e3;s.recoveryAttempts++,setTimeout(()=>{try{const serviceToRestart={name:l,config:c.config,priority:c.priority,keepAlive:r.keepAlive,forceKeepAlive:r.forceKeepAlive};this.startService(serviceToRestart),Logger.serviceLog(l,t+`成功 (尝试次数: ${s.recoveryAttempts})`,"SUCCESS")}catch(e){Logger.serviceLog(l,t+"失败: "+e.message,"ERROR"),r.forceKeepAlive&&(Logger.serviceLog(l,"强力模式将继续尝试重启..."),this.setupForceRecovery(serviceToRestart,s))}},e)}}),e.on("error",e=>{Logger.serviceLog(l,"错误: "+e.message,"ERROR")})}setupForceRecovery(r,s){const t=r.name;setTimeout(()=>{if(!isShuttingDown)try{this.startService(r),Logger.serviceLog(t,`强力恢复最终成功 (尝试次数: ${s.recoveryAttempts})`,"SUCCESS")}catch(e){s.recoveryAttempts++,Logger.serviceLog(t,`强力恢复尝试 ${s.recoveryAttempts} 失败: `+e.message,"ERROR");var o=Math.min(100*(s.recoveryAttempts+1),5e3);Logger.serviceLog(t,`将在 ${o}ms 后再次尝试强力恢复...`),this.setupForceRecovery(r,s)}},100*(s.recoveryAttempts+1))}restartSingleService(o){var e=childProcesses.get(o);if(e){const r=e.service;Logger.serviceLog(o,"正在重启..."),e.process.kill("SIGINT"),setTimeout(()=>{try{this.startService(r),Logger.serviceLog(o,"重启成功","SUCCESS")}catch(e){Logger.serviceLog(o,"重启失败: "+e.message,"ERROR")}},2e3)}else Logger.error(`服务 "${o}" 不存在或未运行`)}restartAllServices(){Logger.warning("正在重启所有服务..."),childProcesses.forEach((e,o)=>{Logger.serviceLog(o,"正在停止..."),e.process.kill("SIGINT")}),setTimeout(()=>{Logger.info("重新启动所有服务..."),this.startAllServices()},5e3)}shutdown(e){isShuttingDown||(isShuttingDown=!0,Logger.warning(`收到 ${e} 信号，正在关闭所有服务...`),[...childProcesses.entries()].sort((e,o)=>(e[1].priority||0)-(o[1].priority||0)).forEach(([e,o])=>{Logger.serviceLog(e,`(优先级 ${o.priority||0}) 正在关闭...`),o.process.kill("SIGINT")}),setTimeout(()=>{var e=childProcesses.size,o=(0<e&&(Logger.warning(`仍有 ${e} 个服务未关闭，正在强制终止...`),childProcesses.forEach(e=>e.process.kill("SIGKILL"))),Logger.info("===== 服务崩溃统计 ====="),crashRecovery.forEach((e,o)=>{(0<e.crashes||0<e.recoveryAttempts)&&Logger.serviceLog(o,`崩溃: ${e.crashes}次, 恢复尝试: ${e.recoveryAttempts}次`)}),Date.now()-startTime);Logger.info("系统总运行时间: "+AppUtils.formatUptime(o)),process.exit(0<e?1:0)},1e4))}}async function main(){try{startTime=Date.now(),await AppUtils.printLogo(),await AppUtils.countdown(3);var e=AppUtils.readConfig();const o=new ServiceManager(e);o.startAllServices(),new CommandHandler(o),process.on("SIGINT",()=>{o.shutdown("SIGINT")}),process.on("SIGTERM",()=>{o.shutdown("SIGTERM")}),process.on("SIGHUP",()=>{o.shutdown("SIGHUP")}),process.on("uncaughtException",e=>{Logger.error("未捕获的异常: "+e.message),console.error(e.stack),o.shutdown("uncaughtException")}),process.on("unhandledRejection",e=>{Logger.error("未处理的Promise拒绝: "+e),o.shutdown("unhandledRejection")})}catch(e){Logger.error("应用启动失败: "+e.message),process.exit(1)}}main();