//@Way.OSBT.SPACE 枕知意
//SQLWAY VER 1.0 搭配项目使用
//配置文件在CONF的database.ini
//调用案例参考MyWayLearn.js
//.Way文件在sql文件夹下参数案例{这里是参数}
//依赖MySql2方便管理
//支持原生SQL注释和语句

const fs=require("fs").promises,path=require("path"),mysql=require("mysql2/promise"),Redis=require("redis");function parseINI(e){const a={};let i=a;return e.split(/\r?\n/).forEach(e=>{var t=e.match(/^\[(.*)\]$/);t?(t=t[1].toLowerCase(),a[t]={},i=a[t]):/^[^=]+=.+$/.test(e)&&([t,e]=e.split("="),i[t.trim()]=e.trim())}),a}class SQLway {constructor(){this.pool=null,this.redis=null,this.modules=new Map,this.isInitialized=!1,this.startTime=Date.now(),this.authPluginLoaded=!1,this.config=null}async initialize(){if(!this.isInitialized)try{await this._loadConfig(),await this._initializeRedis(),await this._createPool(),await this._loadAllModules(),this.isInitialized=!0}catch(e){throw console.error("SQLWAY initialization failed:",e.message),e}}async _loadConfig(){var e=path.join(__dirname,"..","Conf"),e=path.join(e,"database.ini"),e=await fs.readFile(e,"utf8");this.config=parseINI(e)}async _initializeRedis(){var e=this.config.redis||{};this.redis=Redis.createClient({host:e.host||"localhost",port:parseInt(e.port)||6379,password:e.password||void 0,db:parseInt(e.database)||0,retry_strategy: e=>(e.error&&"ECONNREFUSED"===e.error.code&&console.error("Redis connection refused"),36e5<e.total_retry_time?new Error("Redis retry time exhausted"):10<e.attempt?void 0:Math.min(100*e.attempt,3e3))}),this.redis.on("error", e=>{console.error("Redis error:",e.message)}),await this.redis.connect()}async _createPool(){var e=this.config.database||{},t={host:e.host||"localhost",user:e.user||"root",password:e.password||"",database:e.database,port:parseInt(e.port)||3306,waitForConnections:"true"===e.waitForConnections||!0,connectionLimit:parseInt(e.connectionLimit)||10,queueLimit:parseInt(e.queueLimit)||0,charset:e.charset||"utf8mb4"};e.authPlugin&&["mysql_native_password","sha256_password","caching_sha2_password"].includes(e.authPlugin)&&(t.authPlugin=e.authPlugin),this.pool=mysql.createPool(t)}async _loadAllModules(){var e="sqlway:modules:cache";try{var t=await this.redis.get(e);if(t){const i=JSON.parse(t);return await this._buildModulesFromCache(i),void console.log("Modules loaded from Redis cache")}}catch(e){}var a=path.join(__dirname,"SQL");const i={};for(const r of(await fs.readdir(a)).filter(e=>".way"===path.extname(e).toLowerCase())){var s=path.join(a,r),s=await this._parseModuleFile(s);s&&(i[s.name]=s,await this._buildModule(s))}try{await this.redis.setex(e,3600,JSON.stringify(i))}catch(e){}}async _parseModuleFile(t){try{var e=await fs.readFile(t,"utf8");const s=path.basename(t,path.extname(t));var a=e.split(";").map(e=>e.trim()).filter(Boolean);if(0===a.length)return null;const r={};return a.forEach((e, t)=>{var t=0===t?s:""+s+(t+1),a=[];for(const i of e.matchAll(/{([^}]*)}/g))a.push(i[1]);r[t]={sql:e,params:a}}),{name:s,methods:r}}catch(e){return console.error("Failed to parse module file: "+t,e.message),null}}async _buildModulesFromCache(e){for(var[t,a]of Object.entries(e))await this._buildModule(a)}async _buildModule(e){var t={};for(let[l,c]of Object.entries(e.methods))t[l]=async(a={})=>{var t=this._generateCallId();this.isInitialized||await this.initialize();try{var i=`sqlway:query:${l}:`+JSON.stringify(a);try{var s=await this.redis.get(i);if(s)return JSON.parse(s)}catch(e){console.warn("Redis cache read failed:",e.message)}let e=c.sql;var r=[];for(const n of c.params){if(!a.hasOwnProperty(n))throw new Error("Missing required parameter: "+n);e=e.replace(`{${n}}`,"?"),r.push(a[n])}e=e.replace(/{([^}]*)}/g,(e, t)=>a.hasOwnProperty(t)?"?":e);var[o]=await this.pool.execute(e,r);try{await this.redis.setex(i,300,JSON.stringify(o))}catch(e){}return o}catch(e){throw console.error(`SQL execution failed [${t}]:`,e.message),e}};this.modules.set(e.name,t)}getModule(e){if(this.modules.has(e))return this.modules.get(e);throw new Error(`Module ${e} not found`)}async execute(t, a={}){var i=this._generateCallId();this.isInitialized||await this.initialize();try{var s=`sqlway:raw:${t}:`+JSON.stringify(a);try{var r=await this.redis.get(s);if(r)return JSON.parse(r)}catch(e){console.warn("Redis cache read failed:",e.message)}var o=t.matchAll(/{([^}]*)}/g),n=[],l=[];for(const d of o){var c=d[1];if(n.push(c),!a.hasOwnProperty(c))throw new Error("Missing required parameter: "+c);l.push(a[c])}let e=t;for(const u of n)e=e.replace(`{${u}}`,"?");var[h]=await this.pool.execute(e,l);try{await this.redis.setex(s,300,JSON.stringify(h))}catch(e){console.warn("Redis cache write failed:",e.message)}return h}catch(e){throw console.error(`SQL execution failed [${i}]:`,e.message),e}}async clearCache(e="sqlway:*"){try{var t=await this.redis.keys(e);0<t.length&&(await this.redis.del(t),console.log(`Cleared ${t.length} cache entries`))}catch(e){console.error("Cache clear failed:",e.message)}}async close(){this.pool&&await this.pool.end(),this.redis&&await this.redis.quit(),this.isInitialized=!1}_generateCallId(){return Date.now().toString(36).substr(2,8)+Math.random().toString(36).substr(2,4)}}const sqlWay=new SQLway;module.exports=sqlWay;