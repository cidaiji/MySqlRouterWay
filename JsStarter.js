const clear=require("clear"),fs=require("fs"),path=require("path"),readline=require("readline");let exec=require("child_process").exec;const CONFIG_FILE=path.join(__dirname,"Conf","ServerList.ini"),BASE_DIR=__dirname,serverStatus={},START_DELAY=1e4,colors={reset:"[0m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",bright:"[1m",dim:"[2m"};function colorLog(e,r="white"){console.log(colors[r]+e+colors.reset)}function logMessage(e,r="info"){colorLog(`
[${(new Date).toLocaleTimeString()}] ${{error:"[错误]",warn:"[警告]",info:"[信息]"}[r]} `+e,{error:"red",warn:"yellow",info:"cyan"}[r]||"white")}function parseIniFile(e){try{var r=fs.readFileSync(e,"utf8").split("\n");const s={servers:[],globalConfig:{}};let t=null,o=null;return r.forEach(e=>{var r;(e=e.trim())&&!e.startsWith(";")&&(e.startsWith("[")&&e.endsWith("]")?"全局配置"===(t=e.slice(1,-1).trim()).toLowerCase()?(t="globalConfig",s[t]={},o=null):(o={name:t,type:t,scriptPath:"",config:{}},s.servers.push(o)):t&&([e,r]=e.split("=").map(e=>e.trim()),"globalConfig"===t?s.globalConfig[e]=r:o&&("way"===e.toLowerCase()||"api"===e.toLowerCase()?(o.scriptPath=r,o.type===t&&(o.type=e)):o.config[e]=r)))}),s}catch(e){return logMessage("读取配置文件失败: "+e.message,"error"),null}}function displayServerStatus(){clear();var e=Object.values(serverStatus).filter(e=>null!==e.pid).length,r=Object.values(serverStatus).length;colorLog(`📊 服务器状态 [${(new Date).toLocaleTimeString()}]`,"bright"),colorLog(`   运行中: ${e}/`+r,e===r?"green":"yellow"),console.log(),colorLog("🖥️ 服务器详情:","bright"),colorLog("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━","dim"),Object.values(serverStatus).forEach(e=>{var r=null!==e.pid,t=r?"green":"red",r=r?"🟢":"🔴",o=e.lastStartTime?formatUptime(Date.now()-e.lastStartTime.getTime()):"N/A";colorLog(r+` ${e.name} (${e.type})`,t),console.log(`   PID: ${e.pid||"N/A"} | 运行时间: `+o),console.log(`   守护: ${e.keepRunning?"启用":"禁用"} | 重试: ${e.currentTries}/`+e.maxTries),console.log()}),colorLog("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━","dim"),colorLog("按 Ctrl+C 或 输入 exit 结束服务","yellow")}function formatUptime(e){var e=Math.floor(e/1e3),r=Math.floor(e/60),t=Math.floor(r/60),o=Math.floor(t/24);return 0<o?o+`天 ${t%24}时`:0<t?t+`时 ${r%60}分`:0<r?r+"分":e+"秒"}function startServer(e){var r,{name:e,type:t,scriptPath:o,config:s}=e;let n=o;return path.isAbsolute(n)||(n=path.join(BASE_DIR,n)),fs.existsSync(n)?(o="true"===s["keep run"],r=parseInt(s.try||"5",10),s="false"!==s["log output"],serverStatus[e]={name:e,type:t,scriptPath:n,keepRunning:o,maxTries:r,currentTries:0,pid:null,process:null,lastStartTime:null,logOutput:s,lastActivity:new Date,logs:[]},(o=restartServer(e))&&logMessage(`服务器 "${e}" (${t}) 启动成功 (PID: ${o.pid})`),o):(logMessage(`服务器 "${e}" (${t}) 启动失败: 文件 ${n} 不存在`,"error"),null)}function restartServer(t){const o=serverStatus[t];if(!o)return null;if(o.currentTries>=o.maxTries)return logMessage(`服务器 "${t}" (${o.type}) 已达到最大重启次数(${o.maxTries})，停止守护`,"warn"),o.keepRunning=!1,null;o.process&&o.process.kill();var e=exec("node "+o.scriptPath,{cwd:path.dirname(o.scriptPath)});return o.process=e,o.pid=e.pid,o.currentTries++,o.lastStartTime=new Date,o.lastActivity=new Date,1===o.currentTries?logMessage(`服务器 "${t}" (${o.type}) 首次启动 (尝试: ${o.currentTries}/${o.maxTries})`):logMessage(`服务器 "${t}" (${o.type}) 重启 (尝试: ${o.currentTries}/${o.maxTries})`),o.logOutput&&(e.stdout.on("data",e=>{o.lastActivity=new Date,e.toString().trim().split("\n").forEach(e=>{e.trim()&&(e={timestamp:(new Date).toLocaleTimeString(),server:t,type:"stdout",message:e.trim()},o.logs.push(e),50<o.logs.length)&&o.logs.shift()})}),e.stderr.on("data",e=>{o.lastActivity=new Date,e.toString().trim().split("\n").forEach(e=>{var r;e.trim()&&(r=`
[${(new Date).toLocaleTimeString()}] [${t}] ERROR: `+e.trim(),e={timestamp:(new Date).toLocaleTimeString(),server:t,type:"stderr",message:e.trim()},o.logs.push(e),50<o.logs.length&&o.logs.shift(),colorLog(r,"red"))})})),e.on("close",e=>{var r=0===e?"info":"error";logMessage(`服务器 "${t}" (${o.type}) 崩溃退出 (退出代码: ${e})`,r),o.pid=null,o.process=null,o.keepRunning&&o.currentTries<o.maxTries&&(logMessage(`将在5秒后重启服务器 "${t}" (${o.type})...`,"warn"),setTimeout(()=>restartServer(t),5e3))}),e}function showCountdown(o){return new Promise(e=>{let r=o;colorLog(`
⏳ 服务器监控程序将在 ${r} 秒后启动...`,"yellow");const t=setInterval(()=>{r--,process.stdout.write(`\r⏳ 程序将在 ${r} 秒后启动...`),r<=0&&(clearInterval(t),process.stdout.write("\n\n"),e())},1e3)})}async function main(){colorLog("🚀 启动服务器监控系统...","green"),colorLog(`ℹ️ 程序将延迟 ${START_DELAY/1e3} 秒后执行，以便查看日志...`,"yellow"),await showCountdown(START_DELAY/1e3),colorLog("🔛 服务器监控程序已启动","green");const r=parseIniFile(CONFIG_FILE);r||(colorLog("❌ 无法解析服务器配置，程序退出","red"),process.exit(1)),r.servers.forEach(e=>{e.config={...r.globalConfig,...e.config},startServer(e)}),logMessage(`成功启动 ${Object.keys(serverStatus).length} 个服务器`),displayServerStatus(),process.on("SIGINT",()=>{colorLog("\n🛑 收到退出信号，正在关闭所有服务器...","yellow"),Object.values(serverStatus).forEach(e=>{e.process&&e.process.kill()}),setTimeout(()=>{colorLog("✅ 所有服务器已关闭，程序退出","green"),process.exit(0)},1e3)}),process.on("SIGTERM",()=>{process.emit("SIGINT")})}main();